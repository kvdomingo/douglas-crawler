version: '3'

env:
  NAME: douglas-crawler
  COMMIT_SHA:
    sh: git rev-parse HEAD

vars: { }

dotenv:
  - .env

tasks:
  default:
    cmd:
      task: up

  up:
    desc: Build and start Docker containers
    cmd: docker compose --project-name {{.NAME}} up --detach --build --remove-orphans {{.CLI_ARGS}}

  logs:
    desc: Attach to Docker logs
    cmd: docker compose --project-name {{.NAME}} logs --follow {{.CLI_ARGS}}

  stop:
    desc: Stop containers
    cmd: docker compose --project-name {{.NAME}} stop {{.CLI_ARGS}}

  restart:
    desc: Restart containers
    cmd: docker compose --project-name {{.NAME}} restart {{.CLI_ARGS}}

  exec:
    desc: Run a command in the specified container
    cmd: docker compose --project-name {{.NAME}} exec -- {{.CLI_ARGS}}

  down:
    desc: Remove containers
    cmd: docker compose --project-name {{.NAME}} down --remove-orphans {{.CLI_ARGS}}

  clean:
    desc: Nuke everything
    cmd: docker compose --project-name {{.NAME}} down -v --remove-orphans {{.CLI_ARGS}}

  test:
    desc: Run tests
    cmd: task exec -- api poetry run pytest -v

  makemigrations:
    desc: Create a migration file
    cmd: task exec -- api poetry run alembic revision -m {{.CLI_ARGS}}

  migrate:
    desc: Run database migrations
    cmd: task exec -- api poetry run alembic upgrade head

  unmigrate:
    desc: Undo a database migration
    cmd: task exec -- api poetry run alembic downgrade -1

  psql:
    desc: Connect to the database with psql
    cmd: task exec -- db psql -U {{.POSTGRESQL_USERNAME}} -d {{.POSTGRESQL_DATABASE}}

  crawl:
    desc: Run the crawler
    cmd: task exec -- api poetry run python -m scripts.crawl {{.CLI_ARGS}}

  tf-init:
    desc: Initialize Terraform
    dir: infra/terraform
    cmd: terraform init -backend-config=gcs.tfbackend

  tf-plan:
    desc: Plan Terraform changes
    dir: infra/terraform
    cmd: terraform plan -out=.tfplan

  tf-apply:
    desc: Apply Terraform changes
    dir: infra/terraform
    cmd: terraform apply .tfplan

  tf-output:
    desc: Print Terraform output
    dir: infra/terraform
    cmd: terraform output -json

  deploy:
    desc: Deploy to self-hosted Kubernetes cluster
    dir: infra/helm
    cmd: helmfile apply
